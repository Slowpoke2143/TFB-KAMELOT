from telegram import InlineKeyboardMarkup, InlineKeyboardButton
from cart_manager import get_cart, remove_from_cart, clear_cart
from ui import base_reply_markup, delete_all_bot_messages

def build_cart_view(user_id: int):
    """
    –í–æ–∑–≤—Ä–∞—â–∞–µ—Ç (text, InlineKeyboardMarkup) –¥–ª—è —Ç–µ–∫—É—â–µ–π –∫–æ—Ä–∑–∏–Ω—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    cart = get_cart(user_id)
    if not cart:
        return "üõí –í–∞—à–∞ –∫–æ—Ä–∑–∏–Ω–∞ –ø—É—Å—Ç–∞.", None

    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ –ª–∏—Å—Ç—É –∏ ID –±–ª—é–¥–∞
    grouped = {}
    for item in cart:
        sheet = item.get("sheet_name")
        d_id = str(item.get("dish_id"))
        name = item.get("–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        price = int(item.get("–¶–µ–Ω–∞", 0))
        key = (sheet, d_id, name, price)
        grouped.setdefault(key, 0)
        grouped[key] += 1

    lines = []
    buttons = []
    for (sheet, d_id, name, price), count in grouped.items():
        total = count * price
        lines.append(f"{count} X {name} ‚Äî {price}‚ÇΩ = {total}‚ÇΩ")
        buttons.append([
            InlineKeyboardButton(f"‚ùå –£–¥–∞–ª–∏—Ç—å {name}", callback_data=f"del:{sheet}:{d_id}")
        ])

    # –û—á–∏—Å—Ç–∫–∞/–û—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ/–ù–∞–∑–∞–¥
    buttons.append([
        InlineKeyboardButton("üßπ –û—á–∏—Å—Ç–∏—Ç—å –∫–æ—Ä–∑–∏–Ω—É", callback_data="clear"),
        InlineKeyboardButton("‚úÖ –û—Ñ–æ—Ä–º–∏—Ç—å –∑–∞–∫–∞–∑", callback_data="checkout")
    ])
    buttons.append([
        InlineKeyboardButton("‚¨ÖÔ∏è –ù–∞–∑–∞–¥", callback_data="back")
    ])

    return "\n".join(lines), InlineKeyboardMarkup(buttons)

async def show_cart_message(update, context):
    """
    –£–¥–æ–±–Ω—ã–π –ø–æ–º–æ—â–Ω–∏–∫ ‚Äî –æ—á–∏—â–∞–µ—Ç —á–∞—Ç –∏ –ø–æ–∫–∞–∑—ã–≤–∞–µ—Ç –∫–æ—Ä–∑–∏–Ω—É.
    """
    chat_id = update.effective_chat.id
    user_id = update.effective_user.id
    await delete_all_bot_messages(context, chat_id)

    text, markup = build_cart_view(user_id)
    sent = await update.message.reply_text(text, reply_markup=markup or base_reply_markup(), parse_mode="HTML")
    context.user_data.setdefault("message_ids", []).append(sent.message_id)

async def inline_cart_handler(update, context):
    """
    –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç inline-–∫–Ω–æ–ø–∫–∏ –∫–æ—Ä–∑–∏–Ω—ã: del:/clear/back.
    """
    query = update.callback_query
    await query.answer()
    chat_id = query.message.chat_id
    user_id = query.from_user.id
    data = query.data

    # –ü–æ–¥–∫–æ—Ä—Ä–µ–∫—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ—Å—Ç–∞–≤
    if data.startswith("del:"):
        _, sheet_name, dish_id = data.split(":", 2)
        cart = get_cart(user_id)
        for idx, item in enumerate(cart):
            if item.get("sheet_name") == sheet_name and str(item.get("dish_id")) == dish_id:
                remove_from_cart(user_id, idx)
                break

    elif data == "clear":
        clear_cart(user_id)

    elif data == "back":
        await delete_all_bot_messages(context, chat_id)
        sent = await context.bot.send_message(chat_id, "–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=base_reply_markup())
        context.user_data.setdefault("message_ids", []).append(sent.message_id)
        return

    # –ü–æ–∫–∞–∑–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—É—é –∫–æ—Ä–∑–∏–Ω—É
    await delete_all_bot_messages(context, chat_id)
    text, markup = build_cart_view(user_id)
    sent = await context.bot.send_message(chat_id, text, reply_markup=markup or base_reply_markup(), parse_mode="HTML")
    context.user_data.setdefault("message_ids", []).append(sent.message_id)
