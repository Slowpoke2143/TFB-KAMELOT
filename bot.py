# -*- coding: utf-8 -*-
import logging
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler,
    CallbackQueryHandler, ConversationHandler, ContextTypes, filters
)

from config import BOT_TOKEN
from ui import base_reply_markup, delete_all_bot_messages
from cart_manager import add_to_cart, get_cart, replace_cart
from handlers import cart as cart_h
from handlers import menu as menu_h
from handlers import order as order_h
from sheets_async import get_sheet_names

logging.basicConfig(level=logging.INFO)

ASK_NAME, ASK_PHONE, ASK_ADDRESS, ASK_COMMENT, ASK_PAYMENT = (
    order_h.ASK_NAME,
    order_h.ASK_PHONE,
    order_h.ASK_ADDRESS,
    order_h.ASK_COMMENT,
    order_h.ASK_PAYMENT,
)

# -------------------- /start --------------------

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    context.user_data["message_ids"] = []
    context.user_data['in_categories'] = False
    context.user_data['in_dishes'] = False
    context.user_data['in_checkout'] = False

    await delete_all_bot_messages(context, chat_id)
    sent = await update.message.reply_text(
        "–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –¥–æ—Å—Ç–∞–≤–∫—É –µ–¥—ã!\n\n–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=base_reply_markup()
    )
    context.user_data["message_ids"].append(sent.message_id)

# -------------------- TEXT HANDLER --------------------

async def text_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    chat_id = update.effective_chat.id
    text = update.message.text

    # –û—Ç–º–µ–Ω–∞ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏—è –∑–∞–∫–∞–∑–∞
    if text == "‚ùå –û—Ç–º–µ–Ω–∞" and context.user_data.get('in_checkout'):
        return await order_h.cancel_checkout_msg(update, context)

    # –ù–∞–∑–∞–¥
    if text == "‚¨ÖÔ∏è –ù–∞–∑–∞–¥":
        if context.user_data.get('in_dishes'):
            # –ù–∞–∑–∞–¥ –∫ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
            context.user_data['in_dishes'] = False
            context.user_data['in_categories'] = True
            await delete_all_bot_messages(context, chat_id)
            cats = await get_sheet_names()
            rows = [cats[i:i+2] for i in range(0, len(cats), 2)]
            rows.append(["‚¨ÖÔ∏è –ù–∞–∑–∞–¥"])
            sent = await update.message.reply_text(
                "–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞—Ç–µ–≥–æ—Ä–∏—é:",
                reply_markup=ReplyKeyboardMarkup(rows, resize_keyboard=True)
            )
            context.user_data["message_ids"].append(sent.message_id)
            return
        # –ò–Ω–∞—á–µ ‚Äî –≤ –≥–ª–∞–≤–Ω–æ–µ
        context.user_data['in_categories'] = False
        await delete_all_bot_messages(context, chat_id)
        sent = await update.message.reply_text("–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=base_reply_markup())
        context.user_data["message_ids"].append(sent.message_id)
        return

    # –ú–µ–Ω—é
    if text == "üìã –ú–µ–Ω—é":
        return await menu_h.show_categories(update, context)

    # –ö–æ—Ä–∑–∏–Ω–∞
    if text == "üõí –ö–æ—Ä–∑–∏–Ω–∞":
        return await cart_h.show_cart_message(update, context)

    # –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑
    if text == "üîÅ –ü–æ–≤—Ç–æ—Ä–∏—Ç—å –∑–∞–∫–∞–∑":
        from cart_manager import get_last_order
        items = get_last_order(update.effective_user.id)
        await delete_all_bot_messages(context, chat_id)
        if not items:
            sent = await update.message.reply_text(
                "–ü–æ–∫–∞ –Ω–µ—á–µ–≥–æ –ø–æ–≤—Ç–æ—Ä—è—Ç—å ‚Äî –æ—Ñ–æ—Ä–º–∏—Ç–µ –ø–µ—Ä–≤—ã–π –∑–∞–∫–∞–∑ üòä",
                reply_markup=base_reply_markup()
            )
            context.user_data.setdefault("message_ids", []).append(sent.message_id)
            return
        replace_cart(update.effective_user.id, items)
        # —Å—Ä–∞–∑—É –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–æ—Ä–∑–∏–Ω—É
        return await cart_h.show_cart_message(update, context)

    # –ö–æ–Ω—Ç–∞–∫—Ç—ã
    if text == "üìû –ö–æ–Ω—Ç–∞–∫—Ç—ã":
        await delete_all_bot_messages(context, chat_id)
        sent = await update.message.reply_text(
            "üìû –¢–µ–ª–µ—Ñ–æ–Ω –¥–ª—è —Å–≤—è–∑–∏: +7 900 000-00-00",
            reply_markup=base_reply_markup()
        )
        context.user_data["message_ids"].append(sent.message_id)
        return

    # –ï—Å–ª–∏ –º—ã –≤ –º–µ–Ω—é –∫–∞—Ç–µ–≥–æ—Ä–∏–π ‚Äî —Ç—Ä–∞–∫—Ç—É–µ–º —Ç–µ–∫—Å—Ç –∫–∞–∫ –≤—ã–±–æ—Ä –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    if context.user_data.get('in_categories'):
        return await menu_h.show_dishes_for_text(update, context, text)

# -------------------- INLINE HANDLERS --------------------

async def inline_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    data = query.data

    # –ö–Ω–æ–ø–∫–∏ QR (–ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ/–ø–æ–≤—Ç–æ—Ä/–æ—Ç–º–µ–Ω–∞)
    if data in ("qr_confirm", "qr_repeat", "qr_cancel"):
        from handlers import order as order_h  # –ª–æ–∫–∞–ª—å–Ω—ã–π –∏–º–ø–æ—Ä—Ç —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å —Ü–∏–∫–ª–æ–≤
        return await order_h.qr_inline_callbacks(update, context)

    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–∑–∏—Ü–∏–∏ –≤ –∫–æ—Ä–∑–∏–Ω—É
    if data.startswith("add:"):
        await query.answer()
        _, sheet_name, dish_id = data.split(":", 2)

        # –ù–∞–π–¥—ë–º –±–ª—é–¥–æ
        from sheets_async import get_dishes_by_sheet
        dishes = await get_dishes_by_sheet(sheet_name)
        dish = next((item for item in dishes if str(item.get("ID")) == dish_id), None)
        if dish:
            name = dish.get("–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
            price = dish.get("–¶–µ–Ω–∞", "0")
            add_to_cart(query.from_user.id, {
                "–ù–∞–∑–≤–∞–Ω–∏–µ –±–ª—é–¥–∞": name,
                "–¶–µ–Ω–∞": price,
                "sheet_name": sheet_name,
                "dish_id": dish_id
            })
        sent = await query.message.reply_text("‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∫–æ—Ä–∑–∏–Ω—É.", reply_markup=base_reply_markup())
        context.user_data.setdefault("message_ids", []).append(sent.message_id)
        return

    # –û—Å—Ç–∞–ª—å–Ω–æ–µ (del/clear/back) ‚Äî –∫–æ—Ä–∑–∏–Ω–∞
    if data in ("clear", "back") or data.startswith("del:"):
        return await cart_h.inline_cart_handler(update, context)

    # data == "checkout" —Å—é–¥–∞ –ù–ï –ø–æ–ø–∞–¥—ë—Ç ‚Äî ConversationHandler –ø–µ—Ä–µ—Ö–≤–∞—Ç–∏—Ç

# -------------------- main --------------------

def main():
    app = (
        Application.builder()
        .token(BOT_TOKEN)
        .concurrent_updates(10)
        .connection_pool_size(20)
        .build()
    )

    conv = ConversationHandler(
        entry_points=[CallbackQueryHandler(order_h.start_checkout, pattern="^checkout$")],
        states={
            ASK_NAME:   [MessageHandler(filters.TEXT & ~filters.COMMAND, order_h.ask_name)],
            ASK_PHONE:  [MessageHandler(filters.TEXT & ~filters.COMMAND, order_h.ask_phone)],
            ASK_ADDRESS:[MessageHandler(filters.TEXT & ~filters.COMMAND, order_h.ask_address)],
            ASK_COMMENT:[MessageHandler(filters.TEXT & ~filters.COMMAND, order_h.ask_comment)],
            ASK_PAYMENT:[CallbackQueryHandler(order_h.ask_payment, pattern="^pay:(cash|qr|online)$")],
        },
        fallbacks=[MessageHandler(filters.Regex("^‚ùå –û—Ç–º–µ–Ω–∞$"), order_h.cancel_checkout_msg)],
        per_message=False,
    )

    app.add_handler(CommandHandler("start", start))
    app.add_handler(conv)
    app.add_handler(CallbackQueryHandler(inline_handler))
    app.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, text_handler))

    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()
